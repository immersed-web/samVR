---
- name: Setup environment
  hosts: localhost
  connection: local
  vars:
    pnpm_home: "{{ ansible_env.PNPM_HOME | default(fallback_pnpm_home) }}"
    fallback_pnpm_home: "{{ansible_env.HOME}}/.local/share/pnpm"
    nvm_source: '. "{{ ansible_env.HOME }}/.nvm/nvm.sh"'
    # fallback_pnpm_home: "FALLLABACK"

  tasks:
    # - name: Print all Ansible facts
    #   ansible.builtin.debug:
    #     var: ansible_facts
    - name: Update and upgrade package register
      ansible.builtin.apt:
        update_cache: true
        upgrade: true
      become: true
    - name: Enable ntp
      become: true
      ansible.builtin.apt:
        name: ntp
        state: latest
    - name: Setup node
      become: no
      block:
        - name: Install nvm
          ansible.builtin.shell: >
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
          args:
            executable: /bin/bash
            chdir: "$HOME"
            creates: "$HOME/.nvm/nvm.sh"

        - name: Install node
          shell: |
            {{ nvm_source }}
            nvm install {{ item }}
          args:
            executable: /bin/bash
            chdir: "{{ ansible_env.HOME }}"
            # creates: "{{ ansible_env.HOME }}/.nvm/versions/node/{{ item }}"
          register: nvm_install_response
          changed_when: "'already installed' not in nvm_install_response.stderr"
          loop:
            - 22
    - name: Setup pnpm
      # become: true
      block:
        - name: Get and store nodejs version in a fact
          become: no
          ansible.builtin.shell: |
            {{ nvm_source}}
            node -v && echo -n NONODE
          ignore_errors: true
          changed_when: false
          register: node_version_raw
          set_fact:
            node_version: "{{ node_version_raw.stdout | trim }}"
        # Since this will be run from witihn the project, the "packageManager" field in
        # the root package.json will be used and that version of pnpm will be installed automatically
        # I dont think the flag file will work if switching node versions, as corepack is enabled/disabled per node install (I think)
        - name: Enable corepack
          shell: |
            {{ nvm_source}}
            corepack enable
            corepack enable npm
            touch {{ ansible_env['HOME'] }}/corepack_enabled_for_{{ node_version }}_flag
          args:
            executable: /bin/bash
            chdir: "{{ playbook_dir }}/.."
            creates: "{{ ansible_env['HOME'] }}/corepack_enabled_for_{{ node_version }}_flag"
        - name: Store pnpm path in a fact
          shell: |
            {{ nvm_source }}
            which pnpm
          register: pnpm_path
          changed_when: false
          set_fact:
            pnpm_home: "{{ pnpm_path.stdout | trim }}"

        # - name: Run pnpm setup command
        #   ansible.builtin.shell:
        #     cmd: pnpm setup
        #   register: pnpm_setup_output
        #   changed_when: "'Appended new lines' in pnpm_setup_output.stdout"
    - name: Install global node packages
      # become: true
      # environment:
      #   PNPM_HOME: "{{ pnpm_home }}"
      #   PATH: "{{pnpm_home}}:{{ansible_env.PATH}}"
      block:
        - name: Add dotenv-cli
          community.general.pnpm:
            executable: "{{ pnpm_home }}"
            global: true
            name: dotenv-cli
        - name: Add pm2
          community.general.pnpm:
            executable: "{{ pnpm_home }}"
            global: true
            name: pm2
    - name: Install Mediasoup dependencies
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - build-essential
      become: true
    - name: Setup Caddy 2
      become: true
      block:
        - name: Install caddy server prerequisites
          ansible.builtin.apt:
            name:
              - debian-keyring
              - debian-archive-keyring
              - apt-transport-https
        - name: Add caddy key
          ansible.builtin.apt_key:
            url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
        - name: Add caddy repo
          ansible.builtin.apt_repository:
            repo: deb https://dl.cloudsmith.io/public/caddy/stable/deb/debian any-version main
            filename: caddy-stable
            update_cache: true
        - name: Install caddy
          ansible.builtin.apt:
            name: caddy
        - name: Locate caddy path
          ansible.builtin.command:
            cmd: which caddy
          register: caddy_location
          changed_when: false
        # - name: debug caddy path
        #   ansible.builtin.debug:
        #     var: caddy_location
        - name: Give caddy permission to bind to lower ports
          community.general.capabilities:
            path: "{{ caddy_location.stdout }}"
            capability: cap_net_bind_service=eip
            state: present
    - name: Setup pm2 log rotation
      # become: true
      # environment:
      #   PNPM_HOME: "{{ pnpm_home }}"
      #   PATH: "{{pnpm_home}}:{{ansible_env.PATH}}"
      block:
        # - name: Check if already installed
        #   ansible.builtin.command:
        #     cmd: pm2 describe pm2-logrotate
        #   register: logrotate_install_status
        #   changed_when: false
        #   failed_when: false
        - name: Ensure pm2-logrotate is installed
          ansible.builtin.command:
            cmd: pm2 describe pm2-logrotate || pm2 install pm2-logrotate
          changed_when: "'doesn\\'t exist' in logrotate_install_status.stderr"
          # changed_when: true
    - name: Setup docker
      become: true
      block:
        - name: Add docker key
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
        - name: Add docker repo
          ansible.builtin.apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
            update_cache: true
            filename: docker
        - name: Install docker
          ansible.builtin.apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
        - name: Activate docker service
          ansible.builtin.service:
            name: docker
            state: started
        - name: Add docker user group
          ansible.builtin.group:
            name: docker
        - name: Add user to docker user group
          ansible.builtin.user:
            name: "{{ ansible_env.USER }}"
            groups:
              - docker
            append: true
    - name: Setup postgres client
      become: true
      block:
        - name: Add postgres key
          ansible.builtin.apt_key:
            url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        - name: Add postgres repo
          ansible.builtin.apt_repository:
            repo: deb https://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main
            filename: pgdg
        - name: Install postgres client
          become: true
          ansible.builtin.apt:
            name:
              - postgresql-client-15
