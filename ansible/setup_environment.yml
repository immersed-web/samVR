---
- name: Setup environment
  hosts: localhost
  connection: local
  vars:
    pnpm_home: "{{ ansible_env.PNPM_HOME | default(fallback_pnpm_home) }}"
    fallback_pnpm_home: "{{ansible_env.HOME}}/.local/share/pnpm"
    # fallback_pnpm_home: "FALLLABACK"

  tasks:
    # - name: Print all Ansible facts
    #   ansible.builtin.debug:
    #     var: ansible_facts
    # - name: Add caddy role
    #   community.general.ansible_galaxy_install:
    #     type: role
    #     name: caddy_ansible.caddy_ansible
    - name: Update and upgrade package register
      ansible.builtin.apt:
        update_cache: true
        upgrade: true
      become: true
    - name: Enable ntp
      become: true
      ansible.builtin.apt:
        name: ntp
        state: latest
    # - name: Check node version
    #   become: true
    #   ansible.builtin.command:
    #     cmd: "node -v && echo -n NONODE "
    #   ignore_errors: true
    #   changed_when: false
    #   register: node_version
    - name: Install nodejs
      become: no
      block:
        - name: Install nvm
          ansible.builtin.shell: >
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
          args:
            executable: /bin/bash
            chdir: "$HOME"
            creates: "$HOME/.nvm/nvm.sh"

        - name: Install node
          shell: >
            . {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install {{ item }}
          args:
            executable: /bin/bash
            chdir: "{{ ansible_env.HOME }}"
            creates: "{{ ansible_env.HOME }}/.nvm/versions/{{ item }}"
          loop:
            - 22
        # I dont think this (the flag file) will work if switching node versions, as corepack is enabled/disabled per node install (I think)
        - name: Enable corepack
          ansible.builtin.shell:
            cmd: "touch {{ ansible_env['HOME'] }}/corepack_enabled_flag && corepack enable"
            creates: "{{ ansible_env['HOME'] }}/corepack_enabled_flag"
            executable: /bin/bash
          register: corepack_enable
        - name: Print corepack enable
          ansible.builtin.debug:
            var: corepack_enable
    # - name: Setup nodejs
    #   become: true
    #   # when: node_version.stdout == 'NONODE'
    #   block:
    #     - name: Add nodejs apt key
    #       ansible.builtin.apt_key:
    #         url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
    #     - name: Add node repo to apt
    #       ansible.builtin.apt_repository:
    #         repo: deb https://deb.nodesource.com/node_18.x {{ ansible_distribution_release }} main
    #         update_cache: true
    #     - name: Install Node 18
    #       ansible.builtin.apt:
    #         name: nodejs
    #     # Since this will be run from witihn the project, the "packageManager" field in
    #     # the root package.json will be used and that version of pnpm will be installed automatically
    #     - name: Enable corepack
    #       ansible.builtin.shell:
    #         cmd: "touch {{ ansible_env['HOME'] }}/corepack_enabled_flag && corepack enable"
    #         creates: "{{ ansible_env['HOME'] }}/corepack_enabled_flag"
    #       register: corepack_enable
    #     - name: Print corepack enable
    #       ansible.builtin.debug:
    #         var: corepack_enable
    - name: Setup pnpm
      # become: true
      block:
        # - name: Install and enable pnpm
        #   ansible.builtin.shell:
        #     cmd: "command -v pnpm > /dev/null && echo -n PNPMAVAILABLE || corepack prepare pnpm@latest-7 --activate"
        #   register: pnpm_install
        #   changed_when: pnpm_install.stdout != 'PNPMAVAILABLE'
        # - name: Print pnpm_install result
        #   ansible.builtin.debug:
        #     var: pnpm_install
        #   changed_when: false
        - name: Run pnpm setup command
          # when: corepack_enable.changed
          ansible.builtin.command:
            cmd: pnpm setup
          register: pnpm_setup_output
          changed_when: "'Appended new lines' in pnpm_setup_output.stdout"
        # - name: Source bashrc after pnpm was added to path
        #   # when: pnpm_setup_output.changed
        #   ansible.builtin.shell:
        #     cmd: ". ~/.bashrc"
        #     # cmd: "{{ pnpm_setup_output.stdout_lines[-1] }}"
    # - name: Get PNPM_HOME
    #   ansible.builtin.shell:
    #     cmd: source ~/.bashrc && printenv PNPM_HOME
    #     executable: /bin/bash
    #   register: pnpm_home_path
    - name: Install global node packages
      # become: true
      environment:
        PNPM_HOME: "{{ pnpm_home }}"
        PATH: "{{pnpm_home}}:{{ansible_env.PATH}}"
      block:
        # - name: Check pnpm_home
        #   shell:
        #     cmd:  set | grep PNPM_HOME
        #     executable: "/bin/bash"
        #   changed_when: false
        - name: Add dotenv-cli
          community.general.pnpm:
            global: true
            name: dotenv-cli
        - name: Add pm2
          community.general.pnpm:
            global: true
            name: pm2
    # - name: Temp end play
    #   ansible.builtin.meta: "end_play"
    - name: Install Mediasoup dependencies
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - build-essential
      # become: true
    - name: Setup Caddy 2
      become: true
      block:
        - name: Install caddy server prerequisites
          ansible.builtin.apt:
            name:
              - debian-keyring
              - debian-archive-keyring
              - apt-transport-https
        - name: Add caddy key
          ansible.builtin.apt_key:
            url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
        - name: Add caddy repo
          ansible.builtin.apt_repository:
            repo: deb https://dl.cloudsmith.io/public/caddy/stable/deb/debian any-version main
            filename: caddy-stable
            update_cache: true
        - name: Install caddy
          ansible.builtin.apt:
            name: caddy
        - name: Locate caddy path
          ansible.builtin.command:
            cmd: which caddy
          register: caddy_location
          changed_when: false
        # - name: debug caddy path
        #   ansible.builtin.debug:
        #     var: caddy_location
        - name: Give caddy permission to bind to lower ports
          community.general.capabilities:
            path: "{{ caddy_location.stdout }}"
            capability: cap_net_bind_service=eip
            state: present
    - name: Setup pm2 log rotation
      # become: true
      environment:
        PNPM_HOME: "{{ pnpm_home }}"
        PATH: "{{pnpm_home}}:{{ansible_env.PATH}}"
      block:
        - name: Check if already installed
          ansible.builtin.command:
            cmd: pm2 describe pm2-logrotate
          register: logrotate_install_status
          changed_when: false
          failed_when: false
        - name: Install pm2-logrotate
          ansible.builtin.command:
            cmd: pm2 install pm2-logrotate
          when: "'doesn\\'t exist' in logrotate_install_status.stderr"
          changed_when: true
    - name: Setup docker
      become: true
      block:
        - name: Add docker key
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
        - name: Add docker repo
          ansible.builtin.apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
            update_cache: true
            filename: docker
        - name: Install docker
          ansible.builtin.apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
        - name: Activate docker service
          ansible.builtin.service:
            name: docker
            state: started
        - name: Add docker user group
          ansible.builtin.group:
            name: docker
        - name: Add user to docker user group
          ansible.builtin.user:
            name: "{{ ansible_env.USER }}"
            groups:
              - docker
            append: true
    - name: Setup postgres client
      become: true
      block:
        - name: Add postgres key
          ansible.builtin.apt_key:
            url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        - name: Add postgres repo
          ansible.builtin.apt_repository:
            repo: deb https://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main
            filename: pgdg
        - name: Install postgres client
          become: true
          ansible.builtin.apt:
            name:
              - postgresql-client-15
