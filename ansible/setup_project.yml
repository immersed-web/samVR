---
- name: Node dependencies
  hosts: localhost
  vars:
    nvm_source: '. "{{ ansible_env.HOME }}/.nvm/nvm.sh"'
  environment:
    CI: "true" # Make pnpm not touch lockfile when running from ansible
  tasks:
    # - name: pnpm install
    #   community.general.pnpm:
    #     path: "{{ playbook_dir }}/.."
    - name: Pnpm install
      ansible.builtin.shell: |
        {{ nvm_source }}
        pnpm install
      args:
        executable: /bin/bash
        chdir: "{{ playbook_dir }}/.."
      register: pnpm_install_status
      changed_when: "'Already up to date' not in pnpm_install_status.stdout"
- name: Setup database
  hosts: localhost
  vars:
    # pnpm_home: "{{ ansible_env.PNPM_HOME | default(fallback_pnpm_home) }}"
    # fallback_pnpm_home: "{{ansible_env.HOME}}/.local/share/pnpm"
    nvm_source: '. "{{ ansible_env.HOME }}/.nvm/nvm.sh"'
    # fallback_pnpm_home: "FALLLABACK"
  environment:
    CI: "true" # Make pnpm not touch lockfile when running from ansible
    # PNPM_HOME: "{{ pnpm_home }}"
    # PATH: "{{pnpm_home}}:{{ansible_env.PATH}}"
  tasks:
    - name: Create/Start postgres DB
      become: true
      ansible.builtin.command:
        chdir: "{{ playbook_dir }}/.."
        cmd: docker compose --ansi never --progress plain up -d
      register: temp_compose_up
      changed_when: "'Started' in temp_compose_up.stdout or 'Started' in temp_compose_up.stderr"
    - name: Wait for postgres to be ready
      ansible.builtin.wait_for:
        port: 5432
        sleep: 2
        active_connection_states: "ESTABLISHED"
    # - name: Push database schema
    #   ansible.builtin.command: pnpm --filter database push
    #   register: database_push_output
    #   changed_when: "not 'No changes detected' in database_push_output.stdout"
    - name: Migrate database schema
      ansible.builtin.shell: |
        {{ nvm_source }}
        pnpm --filter database migrate
      args:
        executable: /bin/bash
        chdir: "{{ playbook_dir }}/.."
      register: database_push_output
      changed_when: "not 'No changes detected' in database_push_output.stdout"
    - name: Seed database
      ansible.builtin.shell: |
        {{ nvm_source }}
        pnpm --filter database seed
      args:
        executable: /bin/bash
        chdir: "{{ playbook_dir }}/.."
      # register: database_seed_output
      # changed_when: "not 'No changes detected' in database_seed_output.stdout"

- name: Build monorepo
  hosts: localhost
  vars:
    # pnpm_home: "{{ ansible_env.PNPM_HOME | default(fallback_pnpm_home) }}"
    # fallback_pnpm_home: "{{ansible_env.HOME}}/.local/share/pnpm"
    nvm_source: '. "{{ ansible_env.HOME }}/.nvm/nvm.sh"'
    # fallback_pnpm_home: "FALLLABACK"
  environment:
    CI: "true" # Make pnpm not touch lockfile when running from ansible
    # PNPM_HOME: "{{ pnpm_home }}"
    # PATH: "{{pnpm_home}}:{{ansible_env.PATH}}"
  tasks:
    # - name: Build database js bundle
    #   ansible.builtin.command: pnpm --filter database build
    #   changed_when: true
    - name: Build shared packages (./packages/**)
      ansible.builtin.shell: |
          {{ nvm_source }}
          pnpm --filter "./packages/**" -r build
      args:
        executable: /bin/bash
        chdir: "{{ playbook_dir }}/.."
      register: packages_build_output
      changed_when: "'built in' in packages_build_output.stdout"
    # - name: Build all the node projects
    #   ansible.builtin.command:
    #     chdir: "{{ playbook_dir }}/.."
    #     argv:
    #       - pnpm
    #       - --filter
    #       - "!./packages/**"
    #       - -r
    #       - build
    #   changed_when: true
    - name: Build the frontend (app)
      ansible.builtin.shell: |
        {{ nvm_source }}
        pnpm --filter "app" build
      args:
        executable: /bin/bash
        chdir: "{{ playbook_dir }}/.."
      register: app_build_output
      changed_when: "'built in' in app_build_output.stdout"
